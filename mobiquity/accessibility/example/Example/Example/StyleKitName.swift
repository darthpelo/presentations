//
//  StyleKitName.swift
//  ProjectName
//
//  Created by Alessio Roberto on 09/02/16.
//  Copyright (c) 2016 Mobiquity Inc.. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfFirstSectionImage: UIImage?
        static var firstSectionImageTargets: [AnyObject]?
        static var imageOfSecondSectoinImage: UIImage?
        static var secondSectoinImageTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawFirstSectionImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Text Drawing
        let textRect = CGRectMake(28, 30, 186, 56)
        let textTextContent = NSString(string: "First Section")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(29), NSForegroundColorAttributeName: UIColor.whiteColor(), NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawSecondSectoinImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.929, green: 0.016, blue: 0.016, alpha: 1.000)

        //// Text Drawing
        let textRect = CGRectMake(0, 26, 240, 70)
        let textTextContent = NSString(string: "Second Section")
        let textStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        textStyle.alignment = .Center

        let textFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(29), NSForegroundColorAttributeName: color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        textTextContent.drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfFirstSectionImage: UIImage {
        if Cache.imageOfFirstSectionImage != nil {
            return Cache.imageOfFirstSectionImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 120), false, 0)
            StyleKitName.drawFirstSectionImage()

        Cache.imageOfFirstSectionImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfFirstSectionImage!
    }

    public class var imageOfSecondSectoinImage: UIImage {
        if Cache.imageOfSecondSectoinImage != nil {
            return Cache.imageOfSecondSectoinImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 120), false, 0)
            StyleKitName.drawSecondSectoinImage()

        Cache.imageOfSecondSectoinImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfSecondSectoinImage!
    }

    //// Customization Infrastructure

    @IBOutlet var firstSectionImageTargets: [AnyObject]! {
        get { return Cache.firstSectionImageTargets }
        set {
            Cache.firstSectionImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: StyleKitName.imageOfFirstSectionImage)
            }
        }
    }

    @IBOutlet var secondSectoinImageTargets: [AnyObject]! {
        get { return Cache.secondSectoinImageTargets }
        set {
            Cache.secondSectoinImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector("setImage:", withObject: StyleKitName.imageOfSecondSectoinImage)
            }
        }
    }

}
